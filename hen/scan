#! /usr/bin/env python3

import sys
import socket
import json
import hashlib
import sqlite3
import requests

import proto

sys.path.insert(0, "..")
import psite

# http://docs.python-requests.org/en/master/user/quickstart/
#params={"hen_id": 107}
#r = requests.get ("https://k.pacew.org:8646/api.php", params=params)
#ret = r.json()
#print(ret)
#sys.exit(0);


vflag = False

proto.init()

def scan_response(nodenum, mac):
   proto.query("select id"+
                " from nodes"
                " where mac = ?",
                (mac,))
   r = proto.fetch()
   if r == None:
      print("new node", nodenum, "mac", mac)

      id = proto.get_seq()
      proto.query("insert into nodes(id,mac) values(?,?)",
                  (id, mac))
      proto.commit()
   else:
      print("dup node", mac)

def scan(key, divisor):
   for rem in range(0,divisor):
      if vflag:
         print ("scan", rem, "of", divisor)
      scan = dict(key=key, divisor=divisor, remainder=rem, jitter=0)

      hdr = {}
      hdr['to_nodenum'] = proto.BROADCAST_NODENUM
      hdr['from_nodenum'] = proto.MY_NODENUM
      hdr['op'] = proto.get_op('scan')

      pb = proto.encode_init()
      proto.encode(pb, "hdr", hdr)
      proto.encode(pb, "scan", scan)
      proto.sign(pb)
      if vflag:
         proto.dump(pb['buf'])

      proto.send(pb['buf'])
      probe_response_op = proto.get_op('probe_response')
      while True:
         rpkt = proto.rcv()
         if rpkt == None:
            break
         if vflag:
            proto.dump(rpkt)
         pb = proto.decode_init(rpkt)
         hdr = proto.decode(pb, 'hdr')
         if hdr['op'] == probe_response_op:
            resp = proto.decode(pb, 'probe_response')
            mac = '{0:02x}:{1:02x}:{2:02x}:{3:02x}:{4:02x}:{5:02x}'.format(
               resp['mac0'], resp['mac1'], resp['mac2'], 
               resp['mac3'], resp['mac4'], resp['mac5'])
            scan_response (hdr['from_nodenum'], mac)

               


primes = [ 2, 3, 5, 7, 11, 13, 17 ]

for scan_num in range(0, len(primes)):
   prime = primes[scan_num]
   print("scan {0}".format(prime))
   scan(scan_num, prime)
   
