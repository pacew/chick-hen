#! /usr/bin/env python3

import sys
import socket
import json
import hashlib

import proto

CHICK_HEN_MADDR = "224.0.0.130"
CHICK_HEN_PORT = 32519

proto.load_protocol("proto-gen.json")

def dump(buf):
   if buf is None:
      print("None")
      return
   
   start = 0
   while start < len(buf):
      print('{0:04x}:'.format(start), end='')
      for off in range (0, 16):
         if (start + off >= len(buf)):
            break
         print(' {0:2x}'.format(buf[start+off]), end='')
      print('')
      start += 16

sock = socket.socket (socket.AF_INET, socket.SOCK_DGRAM)

# sock.sendto ("hello".encode("utf-8"), (CHICK_HEN_MADDR, CHICK_HEN_PORT))
   
try:
   with open("../hen/.system_key", "r") as file:
      system_key = bytes.fromhex(file.read().strip());
except OSError:
   print ("bad .system_key")
   sys.exit(1)

if len(sys.argv) != 1:
   print ("usage: config-chick")
   sys.exit(1)

def send_rcv(msg):
   for retry in range(0, 2):
      print("xmit", retry)
      sock.sendto(msg, (CHICK_HEN_MADDR, CHICK_HEN_PORT))

      try:
         sock.settimeout(.1)
         (rpkt, addr) = sock.recvfrom(10000)
         if rpkt[0] == MY_NODENUM:
            return rpkt
      except socket.timeout:
         print("timeout")
      
   return None


def doit():
   probe = {}
   mac = node['mac'].split(':')
   probe['mac0'] = int(mac[0],16)
   probe['mac1'] = int(mac[1],16)
   probe['mac2'] = int(mac[2],16)
   probe['mac3'] = int(mac[3],16)
   probe['mac4'] = int(mac[4],16)
   probe['mac5'] = int(mac[5],16)

   hdr = {}
   hdr['to_nodenum'] = 99
   hdr['from_nodenum'] = MY_NODENUM
   hdr['op'] = proto.get_op('probe')

   pb = proto.encode_init()
   proto.encode(pb, "hdr", hdr)
   proto.encode(pb, "probe", probe)
   proto.sign(pb)
   proto.dump(pb['buf'])

   rpkt = send_rcv(pb['buf'])
   dump(rpkt)




doit()
